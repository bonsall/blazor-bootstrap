@using Microsoft.AspNetCore.Components.Web
@using Bonzai.Blazor.Bootstrap.Documentation.Client.Pages.Examples.AccordionItemExamples

@page "/components/accordion-item"

<ComponentDoc Type="typeof(AccordionItem)"
              Description="The individual item that expands and collapses in an accordion">
    <Properties>
        <ParameterDescription Name="@nameof(AccordionItem.Expanded)"
                              Type="@typeof(bool)">
            Controls whether or not the item is showing it's body content. true is open, false is closed.
        </ParameterDescription>
        <ParameterDescription Name="@nameof(AccordionItem.ExpandedChanged)"
                              Type="@typeof(EventCallback<bool>)">
            An action to excute when the value of expanded is changed.
        </ParameterDescription>
        <ParameterDescription Name="@nameof(AccordionItem.ButtonClicked)"
                              Type="@typeof(EventCallback<MouseEventArgs>)">
            A callback to execute when the header button of the accordion is pressed.
        </ParameterDescription>
        <ParameterDescription Name="@nameof(AccordionItem.Accordion)"
                              Type="@typeof(Accordion)">
            A reference to the parent Accordion class this item is a part of.
        </ParameterDescription>
        <RenderFragmentParam Name="@nameof(AccordionItem.Body)" />
        <StringParam Name="@nameof(AccordionItem.CollapseClasses)">
            A classname for the collapsable div.
        </StringParam>
        <StringParam Name="@nameof(AccordionItem.BodyId)">
            The id for the body content. This will be generated if not specified.
        </StringParam>
        <RenderFragmentParam Name="@nameof(AccordionItem.Header)" />
        <StringParam Name="@nameof(AccordionItem.HeaderButtonClasses)">
            Any additional classes to add to the header button.
        </StringParam>
        <RenderFragmentParam Name="@nameof(AccordionItem.Header)" />
        <StringParam Name="@nameof(AccordionItem.HeaderId)">
            The id for the header. This will be generated if not specified.
        </StringParam>
        <AdditionalAttributes />
    </Properties>
    <Methods>
        <MethodItem TSource="AccordionItem"
                    MethodExpression="x => x.SetExpandedAsync(default)">
            <Description>
                Opens or closes the accordion item by updating the value of the <PropertyReference Name="@nameof(AccordionItem.Expanded)" />
                property.
            </Description>
            <Parameters>
                <MethodParameterItem Name="expanded"
                                     Type="typeof(bool)">
                    true to open the accordion, false to close it.
                </MethodParameterItem>
            </Parameters>
        </MethodItem>
    </Methods>
</ComponentDoc>
<ExampleHeading />
<Example ExampleNumber="ExampleNumber">
    <Description>
        Bind to the <PropertyReference Name="@nameof(AccordionItem.Expanded)" /> property to open and close the accordion.
    </Description>
    <LiveExample>
        <BindExpandedProperty />
    </LiveExample>
    <Code>
        @(@"<Row>
    <Column class=""mb-2"">
        <Btn Variance=""primary"" OnClick=""ButtonClick"">
            @ButtonText Item 1
        </Btn>
    </Column>
</Row>
<Accordion>
    <AccordionItem @bind-Expanded=""ExpandItem1"">
        <Header>This is item 1</Header>
        <Body>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce quis nunc et massa bibendum lobortis a non est. Donec a egestas dolor. Aliquam dictum tellus orci, non porta orci laoreet sit amet. Donec congue nisi egestas risus pulvinar tincidunt. Suspendisse suscipit nec diam in semper. Etiam sem quam, hendrerit quis molestie sit amet, tempor quis metus. Pellentesque molestie quis nulla in faucibus.

            Proin arcu ipsum, bibendum id consectetur eget, ornare vulputate neque. Integer condimentum dapibus porttitor. Vivamus viverra vulputate felis sed ultricies. Mauris ac nunc at risus tristique cursus non eu dolor. Vestibulum non ligula leo. Sed sit amet ullamcorper libero. Phasellus imperdiet ex sed ipsum consequat, et dictum lorem efficitur. Nam quis elit vitae nulla consequat bibendum. Curabitur quam lorem, pulvinar quis fermentum ut, tristique sed orci. Maecenas quis lectus vitae lectus condimentum ultrices vitae eu neque. Quisque elementum lorem at erat tempor blandit.
        </Body>
    </AccordionItem>
    <AccordionItem>
        <Header>This is item 2</Header>
        <Body>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce quis nunc et massa bibendum lobortis a non est. Donec a egestas dolor. Aliquam dictum tellus orci, non porta orci laoreet sit amet. Donec congue nisi egestas risus pulvinar tincidunt. Suspendisse suscipit nec diam in semper. Etiam sem quam, hendrerit quis molestie sit amet, tempor quis metus. Pellentesque molestie quis nulla in faucibus.

            Proin arcu ipsum, bibendum id consectetur eget, ornare vulputate neque. Integer condimentum dapibus porttitor. Vivamus viverra vulputate felis sed ultricies. Mauris ac nunc at risus tristique cursus non eu dolor. Vestibulum non ligula leo. Sed sit amet ullamcorper libero. Phasellus imperdiet ex sed ipsum consequat, et dictum lorem efficitur. Nam quis elit vitae nulla consequat bibendum. Curabitur quam lorem, pulvinar quis fermentum ut, tristique sed orci. Maecenas quis lectus vitae lectus condimentum ultrices vitae eu neque. Quisque elementum lorem at erat tempor blandit.
        </Body>
    </AccordionItem>
    <AccordionItem>
        <Header>This is item 3</Header>
        <Body>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce quis nunc et massa bibendum lobortis a non est. Donec a egestas dolor. Aliquam dictum tellus orci, non porta orci laoreet sit amet. Donec congue nisi egestas risus pulvinar tincidunt. Suspendisse suscipit nec diam in semper. Etiam sem quam, hendrerit quis molestie sit amet, tempor quis metus. Pellentesque molestie quis nulla in faucibus.

            Proin arcu ipsum, bibendum id consectetur eget, ornare vulputate neque. Integer condimentum dapibus porttitor. Vivamus viverra vulputate felis sed ultricies. Mauris ac nunc at risus tristique cursus non eu dolor. Vestibulum non ligula leo. Sed sit amet ullamcorper libero. Phasellus imperdiet ex sed ipsum consequat, et dictum lorem efficitur. Nam quis elit vitae nulla consequat bibendum. Curabitur quam lorem, pulvinar quis fermentum ut, tristique sed orci. Maecenas quis lectus vitae lectus condimentum ultrices vitae eu neque. Quisque elementum lorem at erat tempor blandit.
        </Body>
    </AccordionItem>
</Accordion>

@code {
    private bool ExpandItem1 { get; set; }

    private string ButtonText => ExpandItem1
        ? ""Close""
        : ""Open"";

    private void ButtonClick()
    {
        ExpandItem1 = !ExpandItem1;
    }
}")
    </Code>
</Example>

<Example ExampleNumber="ExampleNumber">
    <Description>
        You can also use the <PropertyReference Name="@nameof(AccordionItem.SetExpandedAsync)" /> function to open and close the accordion.
    </Description>
    <LiveExample>
        <SetExpandedAsyncMethod />
    </LiveExample>
    <Code>
        @(@"<Row>
    <Column class=""mb-2"">
        <Btn Variance=""primary"" OnClick=""ToggleItem1"">
            @ButtonText Item 1
        </Btn>
    </Column>
</Row>
<Accordion>
    <AccordionItem @ref=""AccordionItem"">
        <Header>This is item 1</Header>
        <Body>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce quis nunc et massa bibendum lobortis a non est. Donec a egestas dolor. Aliquam dictum tellus orci, non porta orci laoreet sit amet. Donec congue nisi egestas risus pulvinar tincidunt. Suspendisse suscipit nec diam in semper. Etiam sem quam, hendrerit quis molestie sit amet, tempor quis metus. Pellentesque molestie quis nulla in faucibus.

            Proin arcu ipsum, bibendum id consectetur eget, ornare vulputate neque. Integer condimentum dapibus porttitor. Vivamus viverra vulputate felis sed ultricies. Mauris ac nunc at risus tristique cursus non eu dolor. Vestibulum non ligula leo. Sed sit amet ullamcorper libero. Phasellus imperdiet ex sed ipsum consequat, et dictum lorem efficitur. Nam quis elit vitae nulla consequat bibendum. Curabitur quam lorem, pulvinar quis fermentum ut, tristique sed orci. Maecenas quis lectus vitae lectus condimentum ultrices vitae eu neque. Quisque elementum lorem at erat tempor blandit.
        </Body>
    </AccordionItem>
    <AccordionItem>
        <Header>This is item 2</Header>
        <Body>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce quis nunc et massa bibendum lobortis a non est. Donec a egestas dolor. Aliquam dictum tellus orci, non porta orci laoreet sit amet. Donec congue nisi egestas risus pulvinar tincidunt. Suspendisse suscipit nec diam in semper. Etiam sem quam, hendrerit quis molestie sit amet, tempor quis metus. Pellentesque molestie quis nulla in faucibus.

            Proin arcu ipsum, bibendum id consectetur eget, ornare vulputate neque. Integer condimentum dapibus porttitor. Vivamus viverra vulputate felis sed ultricies. Mauris ac nunc at risus tristique cursus non eu dolor. Vestibulum non ligula leo. Sed sit amet ullamcorper libero. Phasellus imperdiet ex sed ipsum consequat, et dictum lorem efficitur. Nam quis elit vitae nulla consequat bibendum. Curabitur quam lorem, pulvinar quis fermentum ut, tristique sed orci. Maecenas quis lectus vitae lectus condimentum ultrices vitae eu neque. Quisque elementum lorem at erat tempor blandit.
        </Body>
    </AccordionItem>
    <AccordionItem>
        <Header>This is item 3</Header>
        <Body>
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce quis nunc et massa bibendum lobortis a non est. Donec a egestas dolor. Aliquam dictum tellus orci, non porta orci laoreet sit amet. Donec congue nisi egestas risus pulvinar tincidunt. Suspendisse suscipit nec diam in semper. Etiam sem quam, hendrerit quis molestie sit amet, tempor quis metus. Pellentesque molestie quis nulla in faucibus.

            Proin arcu ipsum, bibendum id consectetur eget, ornare vulputate neque. Integer condimentum dapibus porttitor. Vivamus viverra vulputate felis sed ultricies. Mauris ac nunc at risus tristique cursus non eu dolor. Vestibulum non ligula leo. Sed sit amet ullamcorper libero. Phasellus imperdiet ex sed ipsum consequat, et dictum lorem efficitur. Nam quis elit vitae nulla consequat bibendum. Curabitur quam lorem, pulvinar quis fermentum ut, tristique sed orci. Maecenas quis lectus vitae lectus condimentum ultrices vitae eu neque. Quisque elementum lorem at erat tempor blandit.
        </Body>
    </AccordionItem>
</Accordion>

@code {
    private AccordionItem AccordionItem { get; set; }

    private string ButtonText => AccordionItem.Expanded
        ? ""Close""
        : ""Open"";

    private async Task ToggleItem1()
    {
        await AccordionItem.SetExpandedAsync(!AccordionItem.Expanded);
    }
}")
    </Code>
</Example>

<Example ExampleNumber="ExampleNumber">
    <Description>
        Conditionally show accordion items using if statements.
    </Description>
    <LiveExample>
        <ConditionalItems />
    </LiveExample>
    <Code>@(@"<Row class=""mb-2"">
    <Column class=""justify-content-between"">
        @ItemButton(ItemModel1)
        @ItemButton(ItemModel2)
        @ItemButton(ItemModel3)
    </Column>
</Row>
<Accordion>
    @RenderItem(ItemModel1)
    @RenderItem(ItemModel2)
    @RenderItem(ItemModel3)
</Accordion>

@code {
    private RenderFragment ItemButton(ConditionalItemModel itemModel) => __builder =>
    {
    <Btn Variance=""primary""
          OnClick=""() => ToggleItem(itemModel)"">
        @itemModel.ButtonText
    </Btn>
    };

    private RenderFragment RenderItem(ConditionalItemModel itemModel) => __builder =>
    {
    @if (itemModel.IsShown)
        {
        <AccordionItem>
            <Header>This is item @itemModel.ItemNumber</Header>
            <Body>
                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Fusce quis nunc et massa bibendum lobortis a non est. Donec a egestas dolor. Aliquam dictum tellus orci, non porta orci laoreet sit amet. Donec congue nisi egestas risus pulvinar tincidunt. Suspendisse suscipit nec diam in semper. Etiam sem quam, hendrerit quis molestie sit amet, tempor quis metus. Pellentesque molestie quis nulla in faucibus.

                Proin arcu ipsum, bibendum id consectetur eget, ornare vulputate neque. Integer condimentum dapibus porttitor. Vivamus viverra vulputate felis sed ultricies. Mauris ac nunc at risus tristique cursus non eu dolor. Vestibulum non ligula leo. Sed sit amet ullamcorper libero. Phasellus imperdiet ex sed ipsum consequat, et dictum lorem efficitur. Nam quis elit vitae nulla consequat bibendum. Curabitur quam lorem, pulvinar quis fermentum ut, tristique sed orci. Maecenas quis lectus vitae lectus condimentum ultrices vitae eu neque. Quisque elementum lorem at erat tempor blandit.
            </Body>
        </AccordionItem>
        }
    };

    private ConditionalItemModel ItemModel1 = new()
    {
        ItemNumber = 1
    };

    private ConditionalItemModel ItemModel2 = new()
    {
        ItemNumber = 2
    };

    private ConditionalItemModel ItemModel3 = new()
    {
        ItemNumber = 3
    };

    private void ToggleItem(ConditionalItemModel itemModel)
    {
        itemModel.IsShown = !itemModel.IsShown;
    }

    private class ConditionalItemModel
    {
        public int ItemNumber { get; set; }

        public bool IsShown { get; set; } = true;

        public string ButtonText => IsShown
            ? $""Hide item {ItemNumber}""
            : $""Show item {ItemNumber}"";
    }
}")</Code>
</Example>

@code {
    private int _exampleNumber;

    private int ExampleNumber
    {
        get
        {
            return ++_exampleNumber;
        }
    }
}