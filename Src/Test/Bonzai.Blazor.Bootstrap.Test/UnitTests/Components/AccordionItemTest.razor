@inherits TestContext

@code {
    const string ExpectedClassName = "unit-test";

    private MockBootstrapJsService _mockBootstrapJsService;

    public AccordionItemTest()
    {
        _mockBootstrapJsService = new(Services);
        _mockBootstrapJsService.SetupGetBoundingClientRect(new BoundingClientRect());
    }

    [Fact]
    public void AccordionItemRenderedOutsideOfAccordion_ThrowsException()
    {
        Assert.Throws<ArgumentNullException>(() => Render(
            @<AccordionItem />
        ));
    }

    [Fact]
    public void RegistersItselfWithParentAccordion()
    {
        var cut = RenderAccordion(
            @<Accordion>
                <AccordionItem></AccordionItem>
            </Accordion>
        );

        Assert.Equal(1, cut.Instance.AccordionItemCount);
    }
    
    [Fact]
    public void HeaderClassesIsSet_AddsClassesToHeader()
    {
        var cut = RenderAndFindItem(
            @<Accordion>
                <AccordionItem HeaderClasses="@ExpectedClassName"></AccordionItem>
            </Accordion>);

        Assert.True(
            FindHeader(cut).ClassList.Contains(ExpectedClassName));
    }

    [Fact]
    public void HeaderButtonClassesIsSet_AddsClassesToHeaderButton()
    {
        var cut = RenderAndFindItem(
            @<Accordion>
                <AccordionItem HeaderButtonClasses="@ExpectedClassName"></AccordionItem>
            </Accordion>);

        var headerButton = FindHeaderButton(cut);
        Assert.True(
            headerButton.ClassList.Contains(ExpectedClassName));
    }

    [Fact]
    public void CollapseClassesIsSet_AddsClassesToCollapseContainer()
    {
        var cut = RenderAndFindItem(
            @<Accordion>
                <AccordionItem CollapseClasses="@ExpectedClassName"></AccordionItem>
            </Accordion>);

        var collapse = FindCollapse(cut);
        Assert.Contains(ExpectedClassName, collapse.ClassList);
    }

    [Fact]
    public void HeaderFragmentIsRenderedInHeaderButton()
    {
        var cut = RenderAndFindItem(
            @<Accordion>
                <AccordionItem>
                    <Header>
                        <div>unit test</div>
                    </Header>
                </AccordionItem>
            </Accordion>);

        var header = FindHeaderButton(cut);
        header.FirstChild.MarkupMatches("<div>unit test</div>");
    }

    [Fact]
    public void BodyFragmentIsRenderedInBody()
    {
        var cut = RenderAndFindItem(
            @<Accordion>
                <AccordionItem>
                    <Body>
                        <div>unit test</div>
                    </Body>
                </AccordionItem>
            </Accordion>);

        var body = FindBody(cut);
        body.FirstChild.MarkupMatches("<div>unit test</div>");
    }

    

    [Fact]
    public async Task ItemIsNotExpanded_HeaderButtonIsClicked_ItemExpands()
    {
        // arrange
        var cut = RenderAndFindItem(
            @<Accordion>
                <AccordionItem></AccordionItem>
            </Accordion>);
        await cut.InvokeAsync(async () => await cut.Instance.SetExpandedAsync(false));

        var headerButton = FindHeaderButton(cut);

        // act
        headerButton.Click();
        cut.WaitForState(() =>
        {
            var collapse = FindCollapse(cut);
            return !string.IsNullOrWhiteSpace(collapse.GetAttribute("style"));
        });

        // Simulate js ontransition end

        // assert
        Assert.True(cut.Instance.Expanded);

        var collapse = FindCollapse(cut);
        Assert.Contains("collapsing", collapse.ClassList);
        Assert.False(cut.FindComponent<Collapse>().Instance.Collapsed);
    }

    [Fact]
    public void ItemIsExpanded_ButtonIsPressed_ItemIsCollapsed()
    {
        // arrange
        var cut = RenderAndFindItem(
            @<Accordion>
                <AccordionItem></AccordionItem>
            </Accordion>);

        var headerButton = FindHeaderButton(cut);

        // act
        headerButton.Click();
        cut.WaitForState(() =>
        {
            var collapse = FindCollapse(cut);
            return collapse.ClassList.Contains("collapsing");
        });

        // Simulate js ontransition end

        // assert
        Assert.False(cut.Instance.Expanded);

        var collapse = FindCollapse(cut);
        Assert.Contains("collapsing", collapse.ClassList);
        Assert.True(cut.FindComponent<Collapse>().Instance.Collapsed);
    }

    [Fact]
    public void AccordionItemRemovedFromDom_AccordionItemRemovedFromAccordion()
    {
        // arrange
        var renderItem = true;
        var cut = RenderAccordion(
            @<Accordion>
                @if(renderItem)
                {
                    <AccordionItem></AccordionItem>
                }
            </Accordion>);

        // act
        renderItem = false;
        cut.Render();

        // assert
        Assert.Equal(0, cut.Instance.AccordionItemCount);
    }

    private void AssertBodyHasNoStyle(IRenderedComponent<AccordionItem> accordionItem)
    {
        Assert.Null(
            FindCollapse(accordionItem).GetAttribute("style")
        );
    }

    private IElement FindCollapse(IRenderedComponent<AccordionItem> accordionItem) =>
        accordionItem.Find(".accordion-item .accordion-collapse");

    private IElement FindBody(IRenderedComponent<AccordionItem> accordionItem) =>
        accordionItem.Find(".accordion-item .accordion-collapse .accordion-body");

    private IElement FindHeader(IRenderedComponent<AccordionItem> accordionItem) =>
        accordionItem.Find(".accordion-item .accordion-header");

    private IElement FindHeaderButton(IRenderedComponent<AccordionItem> accordionItem) =>
        accordionItem.Find(".accordion-item .accordion-header .accordion-button");

    private IReadOnlyList<IRenderedComponent<AccordionItem>> RenderAndFindItems(RenderFragment renderFragment)
    {
        var cut = Render<Accordion>(renderFragment);

        return cut.FindComponents<AccordionItem>();
    }

    private IRenderedComponent<AccordionItem> RenderAndFindItem(RenderFragment renderFragment)
    {
        var cut = Render<Accordion>(renderFragment);

        return cut.FindComponent<AccordionItem>();
    }

    private IRenderedComponent<Accordion> RenderAccordion(RenderFragment renderFragment) =>
    Render<Accordion>(renderFragment);
}