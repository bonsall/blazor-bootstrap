@inherits TestBase<TabItem>

@code {
    const string ListItemClass = "nav-item";
    const string AnchorClass = "nav-link";

    [Fact]
    public void RendersListItemWithNavClassAndAnchorWithNavClass()
    {
        var cut = RenderComponent(@<TabItem></TabItem>);

        var listItem = cut.Find("li");
        
        Assert.Contains(ListItemClass, listItem.ClassList);
        
        var anchor = listItem.FirstElementChild;
        Assert.Contains(AnchorClass, anchor.ClassList);
    }

    [Fact]
    public void ClassAttributeAppendedToListItemClassList()
    {
        const string ExpectedClassName = "unit-test";
        var cut = RenderComponent(@<TabItem class="@ExpectedClassName"></TabItem>);

        var listItem = cut.Find("li");
        Assert.Contains(ListItemClass, listItem.ClassList);
        Assert.Contains(ExpectedClassName, listItem.ClassList);
    }

    [Fact]
    public void AdditionalAttributesRenderedOnListItem()
    {
        var cut = RenderComponent(@<TabItem data-unit-test="custom value"></TabItem>);

        var listItem = cut.Find("li");
        Assert.NotNull(listItem.GetAttribute("data-unit-test"));
    }

    [Fact]
    public void ChildContentIsRenderedInButton()
    {
        const string ExpectedContent = "unit test";
        var cut = RenderComponent(@<TabItem>@ExpectedContent</TabItem>);

        var button = cut.Find("li > button");
        Assert.Equal(ExpectedContent, button.TextContent);
    }

    [Fact]
    public void LinkClassesSet_LinkClassesAppendedToButton()
    {
        const string ExpectedClassName = "unit-test";
        var cut = RenderComponent(@<TabItem LinkClasses="@ExpectedClassName"></TabItem>);

        var button = cut.Find("button");
        Assert.Contains(ExpectedClassName, button.ClassList);
    }

    [Theory]
    [InlineData(true, "true")]
    [InlineData(false, "false")]
    public void AriaSelectedAttributReflectsTheValueOfActiveProperty(bool active,
        string expectedAriaSelected)
    {
        var cut = RenderComponent(@<TabItem Active="active"></TabItem>);

        var tabItem = cut.Find(".nav-link");
        Assert.Equal(expectedAriaSelected, tabItem.GetAttribute("aria-selected"));
    }

    [Fact]
    public void TabPaneInstanceSet_AriaControlsAttributeHasTabPaneId()
    {
        // TabPane requires a BootstrapJsService
        new MockBootstrapJsService(Services);

        // Need to pass tabList like this to avoid compiler errors.
        RenderFragment<IReadOnlyCollection<TabPane>> tabList = tabPanes =>
            @<TabList>
                @foreach (var pane in tabPanes)
                {
                    <TabItem TabPane="pane">@pane.Title</TabItem>
                }
            </TabList>;
        var cut = Render<TabContainer>(
            @<TabContainer Tabs="tabList">
                <ChildContent>
                    <TabPane id="unit-test"></TabPane>
                </ChildContent>
            </TabContainer>);

        var tabItem = cut.Find(".nav-link");
        var tabPane = cut.Find(".tab-pane");

        Assert.Equal(tabPane.GetAttribute("id"), tabItem.GetAttribute("aria-controls"));
    }
}
